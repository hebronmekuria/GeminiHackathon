Development using Gemini API via the Python SDK

Tried: !pip install -U -q google.generativeai
Error: ERROR: Could not find a version that satisfies the requirement python (from versions: none)
ERROR: No matching distribution found for python

Also Tried: pip install -U -q google.generativeai

This worked: pip3 install -U -q google.generativeai

Inside a new Py file:
import google.generativeai as genai

Inside an .env file, add the Google API Key

Imported the .env file and tried running the py file, but error says:
 raise exceptions.DefaultCredentialsError(_CLOUD_SDK_MISSING_CREDENTIALS)
google.auth.exceptions.DefaultCredentialsError: Your default credentials were not found. To set up 
Application Default Credentials, see https://cloud.google.com/docs/authentication/external/set-up-adc for more information.

Fix: Forgot load_dotenv()

Using an Image

To load the image on your machine:
curl -o image.jpg https://storage.googleapis.com/generativeai-downloads/images/jetpack.jpg

When I copied the rest of the code for making a prompt using the image and text prompt,
it didn't work, says "PIL" is not recognized

PIL is:
a free and open-source additional library for the Python programming language that adds support for opening, 
manipulating, and saving many different image file formats

To get PIL: pip install pillow
This resolves the error

To practice with audio input prompts, we can use wget
To install: brew install wget
To use: !wget -q $URL -O sample.mp3 # This adds an audio (.mp3) file
to the project
Then do the python code...

Out of nowhere, my py files won't run...

Let's work on the frontend in the mean time
Let's init a React App
I'm using a UI library called NextUI

yarn add @nextui-org/react framer-motion

Next, set up tailwind:
npm install -D tailwindcss
npx tailwindcss init
follow the other instructions in https://tailwindcss.com/docs/installation

Then add the following to tailwind.config.js
// tailwind.config.js
const {nextui} = require("@nextui-org/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [nextui()],
};


Uploading a file for file inputs:
curl -o image.jpg https://storage.googleapis.com/generativeai-downloads/images/jetpack.jpg

Delete files that you're uploaded to genai
genai.delete_file(sample_file.name)

File types supported by Gemini

Gemini 1.5 Pro - Image, Audio

Gemini Pro Vision - Image

Image types supported:
-PNG 
-JPEG 
-WEBP 
-HEIC 
-HEIF 

Audio types supported:
-WAV
-MP3 
-AIFF 
-AAC 
-OGG
-FLAC 

So to ingest files, we need to first convert them to a jpg or png file
To do so, we are going to use the packages: ImageMgick and Ghostscript
to convert from pdg to jpg. 

brew install imagemagick ghostscript

convert -density 300 input.pdf -quality 100 output.jpg

To convert from docx to jpg, we'll use libreoffice
brew install --cask libreoffice


ERRORR==========

The below don't work because libreoffice can't be found
For now, we're not going to focus on it and we'll assume that we only need to conver from pdf to jpg
docx to pdf
libreoffice --headless --convert-to pdf file.docx --outdir /path/to/output

pdf to jpg
convert -density 300 /path/to/output/input.pdf -quality 100 output.jpg


STEPS

-Make the converted output files get stored in one folder - a folder gets created for each process
-The API loops inside the folder and uploads the files as "rubrik" and as "essay" for each step


TO start the react app
Go to the Frontend/frontend location and do 
npm start


Currently writing the code that would take in files, convert them to jpg, 
parse the output folders and send them to the API

There's something weird with the directory, because if I move the input file to a 
directory outside of Gemini, it doesn't work 

Bash script gives this error, but it infact works to convert
a pdf file to multiple or one jpg files IN THE SAME LOCATION as 
the original file

The input given to convert needs to be a path to the pdf file though

Progress check:
I wrote the python code that
-Receives an essay and rubrik file paths
-Converts the essay and rubrik to jpg files
-Passes the files into a conversation with Gemini

What isn't working:
Gemini doesn't remember the conversation with the way that I had things
(With .generate_content) 
To use the chat function, it doesn't seem to recognize image formats...

What to do..

What I tried
Creating a clean file before each file that needs to be uploaded and populating the file with a transcription from the API

Then, using those transcriptions to later read from and do the Grading

Challenge: It isn't reading and transcribing the rubrik correctely since it is shown in a table.


Possible things to try later:
Instead of transcription, tell the API to just read the file and summarize what it says in detail...? THIS WORKED


Stretch features (Go back and double check what we wrote earlier for stretch)
-Make entering rubrik optional (grade by correctness or previously uploaded rubrik)
    -after their choice, process the request differently by entering a different prompt that grades based on correctness
-Ability to view and browse through previously entered rubriks
    -you need to name rubriks in this case


ChackraUI
To install it:
yarn add @chakra-ui/react @emotion/react @emotion/styled framer-motion

I ran into this error when practicing with chakra UI 
Cannot read properties of null (reading 'useMemo') TypeError: Cannot read properties of null (reading 'useMemo') at useMemo

and what fixed it was updated react-redux by doing yarn add react-redux

After solving this, nothing is being rendered still
so ima try to install chakra using npm, although I doubt it makes a difference

I just redid everything with Chakra and it works

Steps to Setting up ChackraUI
First, install it inside the reach app 
yarn add @chakra-ui/react @emotion/react @emotion/styled framer-motion

Second, include the wrapper inside the index.js file:
  <React.StrictMode>
    <ChakraProvider>
    <App />
    <AirbnbCard/>
    </ChakraProvider>
  </React.StrictMode>

Next, In the App.js file or other component files, just start importing and using 
the different components
function App() {
  return (
    <div className="App">
      
      <Box
            color='gray.500'
            fontWeight='semibold'
            letterSpacing='wide'
            fontSize='xs'
            textTransform='uppercase'
            ml='2'
          >
            Hello World
          </Box>
      
    </div>
  );
}

export default App;


BOX 

Box is a div under the hood and can be styled in any way that a div can be styled

Layout components in Chakra
Flex, Box, Stack, Vstack, Hstack

Box: Acts as a section or div

takes bg, w, h, color, and more

<Box as = 'section' /> to render it as a section


FLEX 

it is a box under the hood and allows you to distribute items and add space
between items

Has props: direction, align, grow, shrink, justify, etc....

Children of the flex are either in the horizontal or vertical direction

by default, the children are aligned in a row, but you can change it by doing direction = 'column'

the main axis is whatever longest axis 

example of usage:

justify = 'space-between ;
align = 'center'


STACK 

used to add spacing between elements 
under the hood, it's a flex component
allows for uniform spacing between items
By default, aligns items as column but can be changed using direction = ""

VSTACK 
vertical stack 
to add space between elements in the vertical direction and center them 

HSTACK 
horizontal stack 
to add space between elements in the horizontal direction and center them 


<Stack spacing = 24px direction="row" > </Stack>

if you're using VSTACK or HSTACk, you don't need to use the direction prop
VSTACK and HSTACK add centering that direction = " " doesn't apply


TEXT 

to render text and paragraph
to do italics <Text as="i"> This is the text </Text>

<Text isTruncated> </Text>   --- To truncate text that is too long
<Text noofLines =3 ></Text> --- To truncate after three lines 


HEADING

<Heading as "h1"> This is I </Heading> --- this can also be replaced by h2, h3, etc...
if the as is not there, it renders h2 by default 
other usage
fontSize = '40px'


STYLE PROPS 

these styl props allow you to style a component but passing styles directly into it 
normally written in camel case

for example
<Box m={2}></Box> ---- m means margin

other usage:
maxW means "maximum width"

plenty of docs to check...

also look at the indivial component docs to see which style props go with which components


PSEUDO STYLE PROPS
used to style the hover, active, inactive,etc states of components

you need to use _ before the name of the prop. 

Examples

<Button colorScheme = 'red' _hover = {{background: 'blue'}} _focus = {{background: 'yellow'}} >Click Me</Button>

exiting from a sqlite CLI 

To run the database script
Go inside the directory where the .py database script is and run
python3.py

to get into the sqlite CLI
sqlite3 file_paths.db---only because this is the name of the db as named in the 
first function in db that creates the database

To check which tables are inside the database:

.tables

to verify the structure of the table:
PRAGMA table_info(file_paths);


Before any operations involving a daatabase, we need to use the create_connections
function